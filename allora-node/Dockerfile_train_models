# Use Python 3.10 as base image
FROM python:3.10-slim as project_env

# Use the official NVIDIA CUDA for GPU
# HIDDEN : FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04

# Set the working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    wget \
    libfreetype6-dev \
    libpng-dev \
    libjpeg-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy the requirements.txt file
COPY requirements.txt .

# Install Python dependencies WITH cache for faster rebuilds
RUN pip install --upgrade pip setuptools \
    && pip install --timeout=360 -r requirements.txt

# Install TensorFlow CPU version WITH cache
RUN pip install tensorflow-cpu==2.13.0

# Ensure XGBoost is installed WITH cache
RUN pip install xgboost==1.7.6

# Enable multi-threading for CPU optimization
# These control how many CPU cores are used by numerical libraries
ENV OMP_NUM_THREADS=4
ENV MKL_NUM_THREADS=4
ENV NUMEXPR_NUM_THREADS=4
ENV OPENBLAS_NUM_THREADS=4

# Second stage for cleaner image
FROM project_env

# Copy the application code
COPY train_models.py app_config.py app_utils.py ./

# Set the environment variable for TensorFlow to use CPU
# HIDDEN : ENV TF_FORCE_GPU_ALLOW_GROWTH=true

# Ensure the CUDA and CUDNN libraries are in the PATH
# HIDDEN : ENV LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
# HIDDEN : ENV PATH=/usr/local/cuda/bin:$PATH

# Run the training script
CMD ["python", "train_models.py"]